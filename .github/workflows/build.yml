name: Build and Analyze .NET

on:
  push:
    branches:
      - master # O la rama principal de tu proyecto
  pull_request:
    branches:
      - master # O la rama principal de tu proyecto

jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest # Perfecto para entornos .NET con PowerShell

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necesario para Codecov si quieres datos históricos de cobertura

      - name: Set up JDK 17 # Este paso no es necesario para Codecov/Coverlet, solo para SonarQube. Puedes eliminarlo si no lo necesitas para nada más.
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.x' # Asegúrate que esta versión coincida con la de tu proyecto .NET

      # --- INICIO: PASOS DE SONARQUBE (ELIMINADOS) ---
      # - name: Cache SonarQube scanner
      #   id: cache-sonar-scanner
      #   uses: actions/cache@v4
      #   with:
      #     path: .\.sonar\scanner
      #     key: ${{ runner.os }}-sonar
      #     restore-keys: ${{ runner.os }}-sonar

      # - name: Install SonarQube scanner
      #   if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      #   shell: powershell
      #   run: |
      #     New-Item -Path .\.sonar\scanner -ItemType Directory
      #     dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      # - name: SonarQube Begin Analysis (ELIMINADO)
      #   shell: powershell
      #   run: |
      #     # ... tu lógica de SonarQube begin ...

      # --- FIN: PASOS DE SONARQUBE (ELIMINADOS) ---

      - name: Build Project
        shell: powershell
        run: |
          dotnet build StockWorkerSn.sln

      - name: Run Tests with Coverage
        shell: powershell
        run: |
          # Asegúrate de que coverlet.collector esté agregado a tu proyecto de pruebas:
          # dotnet add Testing/Testing.csproj package coverlet.collector
          
          # Creamos el directorio si no existe para asegurar la ruta de salida
          New-Item -Path ".sonarqube/temp/TestResults" -ItemType Directory -Force
          
          # Ejecuta las pruebas y genera el archivo de cobertura.
          # Usamos las mismas rutas de salida que tenías para SonarQube.
          dotnet test Testing/Testing.csproj `
            --no-build `
            --collect:"XPlat Code Coverage" `
            --results-directory ".sonarqube/temp/TestResults/" `
            --logger "trx;LogFileName=test_results.trx" `
            /p:CoverletOutputFormat="cobertura" `
            /p:CoverletOutput=".sonarqube/temp/cobertura.xml"
          
          # Verificación y listado de archivos (útil para depuración)
          $coverageFile = Get-ChildItem -Path ".sonarqube/temp/TestResults/" -Recurse -Filter "coverage.cobertura.xml" | Select-Object -ExpandProperty FullName -First 1
          
          if ($coverageFile) {
            Write-Host "Found coverage report at: $coverageFile"
            Write-Host "--- Content of $coverageFile ---"
            Get-Content $coverageFile | Out-String | Write-Host
            Write-Host "--- End of content ---"
            
            Write-Host "Listing contents of .sonarqube/temp/TestResults/ directory:"
            Get-ChildItem -Path ".sonarqube/temp/TestResults/" -Recurse -Force | Format-List FullName, Length
            Write-Host "Listing contents of .sonarqube/temp/ directory:"
            Get-ChildItem -Path ".sonarqube/temp/" -Recurse -Force | Format-List FullName, Length
          } else {
            Write-Host "ERROR: Coverage report (coverage.cobertura.xml) not found after tests. Exiting with error."
            exit 1
          }

      # --- NUEVO PASO PARA CODECOV ---
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          # Aquí especificamos la ruta donde Coverlet generó el archivo de cobertura
          files: ./.sonarqube/temp/cobertura.xml 
          fail_ci_if_error: true # Opcional: hará que el build de CI falle si hay un problema al subir a Codecov
          token: ${{ secrets.CODECOV_TOKEN }} # SOLO para repositorios privados. Crea este secreto en GitHub.
          verbose: true # Para obtener logs detallados en caso de problemas
          # flags: unit-tests # Opcional: puedes añadir flags para categorizar los reportes en Codecov

      # --- FIN: NUEVO PASO PARA CODECOV ---

      # --- INICIO: PASOS DE SONARQUBE (ELIMINADOS) ---
      # - name: SonarQube End Analysis (ELIMINADO)
      #   shell: powershell
      #   run: |
      #     # ... tu lógica de SonarQube end ...
      # --- FIN: PASOS DE SONARQUBE (ELIMINADOS) ---